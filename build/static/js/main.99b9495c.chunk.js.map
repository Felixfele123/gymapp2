{"version":3,"sources":["components/Set.js","components/NewSet.js","components/RemoveSet.js","components/Exercise.js","components/Workout.js","components/NewWorkout.js","components/TopBar.js","components/BottomBar.js","components/ActiveWorkout.js","App.js","reportWebVitals.js","index.js"],"names":["makeStyles","theme","success","backgroundColor","color","closed","paper","paddingY","spacing","margin","marginTop","open","description","textAlign","fail","maxHeight","setWrapper","paddingBottom","exercise","paddingTop","exerciseName","root","display","justifyContent","flexWrap","changeset","paddingLeft","paddingRight","flexGrow","marginX","workoutName","image","width","height","img","maxWidth","timer","headline","marginY","button","Lowerbody","borderColor","useStyles","menuButton","marginRight","title","TopBar","AppStatus","putWorkouts","classes","history","useHistory","AppBar","position","Toolbar","Grid","container","direction","item","xs","Typography","onClick","push","variant","className","Button","disabled","size","buttom","padding","appBar","top","bottom","toolbar","alignItems","ComplexGrid","useState","workouts","setWorkouts","activeWorkout","setActiveWorkout","setNewWorkoutList","setAppStatus","useCallback","a","axios","method","url","withCredentials","data","useEffect","fetchWorkouts","fetchWorkoutsList","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TASkBA,aAAW,SAACC,GAAD,MAAY,CACrCC,QAAS,CACLC,gBAAiB,UACjBC,MAAO,SAEXC,OAAQ,CACNF,gBAAiB,UACjBC,MAAO,SAETE,MAAO,CACLC,SAAUN,EAAMO,QAAQ,GACxBC,OAAQ,OACRC,UAAW,QAEbC,KAAM,CACJR,gBAAiB,WAEnBS,YAAa,CACXH,OAAQ,gBACRI,UAAW,c,OCnBCb,aAAW,SAACC,GAAD,MAAY,CACrCC,QAAS,CACLC,gBAAiB,UACjBC,MAAO,SAEXU,KAAM,CACFX,gBAAiB,UACjBC,MAAO,SAEXE,MAAO,CACLC,SAAUN,EAAMO,QAAQ,GACxBC,OAAQ,OACRC,UAAW,OACXK,UAAW,QAEbJ,KAAM,CACJR,gBAAiB,WAEnBS,YAAa,CACXH,OAAQ,gBACRI,UAAW,c,OCpBCb,aAAW,SAACC,GAAD,MAAY,CACrCC,QAAS,CACLC,gBAAiB,UACjBC,MAAO,SAEXU,KAAM,CACFX,gBAAiB,UACjBC,MAAO,SAEXE,MAAO,CACLC,SAAUN,EAAMO,QAAQ,GACxBC,OAAQ,OACRC,UAAW,OACXK,UAAW,QAEbJ,KAAM,CACJR,gBAAiB,WAEnBS,YAAa,CACXH,OAAQ,gBACRI,UAAW,cCpBCb,aAAW,SAACC,GAAD,MAAY,CACrCe,WAAY,CACRC,cAAe,QAEnBC,SAAU,CACRR,UAAW,MACXS,WAAY,QAEdC,aAAc,CACVP,UAAW,SACXJ,OAAQ,QAEZY,KAAM,CACFC,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACV,QAAS,CACPf,OAAQ,IAGdP,QAAS,CACLC,gBAAiB,UACjBC,MAAO,SAEXU,KAAM,CACFX,gBAAiB,UACjBC,MAAO,SAEXqB,UAAW,CACPC,YAAa,OACbC,aAAc,Y,4BC5BJ3B,aAAW,SAACC,GAAD,MAAY,CACvCoB,KAAM,CACJO,SAAU,EACVnB,OAAQ,GAEVH,MAAO,CACLC,SAAUN,EAAMO,QAAQ,GACxBqB,QAAS,GAEXC,YAAa,CACXjB,UAAW,UAEbkB,MAAO,CACLC,MAAO,IACPC,OAAQ,KAEVC,IAAK,CACHzB,OAAQ,OACRa,QAAS,QACTa,SAAU,OACVpB,UAAW,QAEbqB,MAAO,CACLvB,UAAW,c,kBCzBGb,aAAW,SAACC,GAAD,MAAY,CACrCC,QAAS,CACLC,gBAAiB,UACjBC,MAAO,SAEXU,KAAM,CACFX,gBAAiB,UACjBC,MAAO,SAEXE,MAAO,CACLC,SAAUN,EAAMO,QAAQ,GACxBC,OAAQ,OACRC,UAAW,QAEbC,KAAM,CACJR,gBAAiB,WAEnBS,YAAa,CACXH,OAAQ,iBAEV4B,SAAU,CACNC,QAAS,QAEbC,OAAQ,CACJ1B,UAAW,SACXH,UAAW,QAEf8B,UAAW,CACPC,YAAa,e,kCC7BfC,EAAY1C,aAAW,SAACC,GAAD,MAAY,CACrCoB,KAAM,CACFO,SAAU,GAEZe,WAAY,CACVC,YAAa3C,EAAMO,QAAQ,IAE7BqC,MAAO,CACLjB,SAAU,GAEZQ,MAAO,CACHvB,UAAW,SAEf0B,OAAQ,CACN1B,UAAW,MACXT,MAAO,aA2BA0C,EAvBA,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,YACpBC,EAAUP,IACVQ,EAAUC,cAChB,OACE,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACA,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,SACA,eAACD,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAA1B,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CAAYC,QAAS,WAAOX,EAAQY,KAAK,MAAOC,QAAQ,YAAYC,UAAWf,EAAQJ,MAAvF,uBAIF,cAACU,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGK,UAAWf,EAAQV,OAArC,SACE,cAAC0B,EAAA,EAAD,CAAQJ,QAASb,EAAakB,UAAWnB,EAAWoB,KAAK,QAAQJ,QAAQ,YAAzE,sCChCM/D,aAAW,SAACC,GAAD,MAAY,CACvCoB,KAAM,CACJO,SAAU,GAEZe,WAAY,GAEZE,MAAO,CACLjB,SAAU,GAEZwC,OAAQ,CACJpC,MAAO,OACPnB,UAAW,SACXoB,OAAQ,OACRxB,OAAQ,EACR4D,QAAS,GAEbC,OAAQ,CACNrC,OAAQ,OACRsC,IAAK,OACLC,OAAQ,EACR/D,OAAQ,EACRQ,cAAe,QAEjBwD,QAAS,CACPxC,OAAQ,OACRpB,UAAW,SACXJ,OAAQ,EACR4D,QAAS,OC7BKrE,aAAW,SAACC,GAAD,MAAY,CACrCC,QAAS,CACLC,gBAAiB,UACjBC,MAAO,SAEXU,KAAM,CACFX,gBAAiB,UACjBC,MAAO,SAEXE,MAAO,CACLG,OAAQ,uBAEVE,KAAM,CACJR,gBAAiB,WAEnBS,YAAa,CACXH,OAAQ,gBACRI,UAAW,UAEb2C,UAAW,CACPa,QAAS,EACTrC,MAAO,OACP0C,WAAY,SACZnD,eAAgB,cCpBT,SAASoD,IAAe,IAAD,EACJC,mBAAS,IADL,mBAC7BC,EAD6B,KACnBC,EADmB,OAEMF,oBAAS,GAFf,mBAE7BG,EAF6B,KAEdC,EAFc,OAGAJ,mBAAS,IAHT,gCAIQA,mBAAS,KAJjB,mBAIbK,GAJa,aAKFL,oBAAS,GALP,mBAK7B7B,EAL6B,KAKlBmC,EALkB,OAMRN,mBAAS,iBAND,mBAQ9B5B,GAR8B,UAQhBmC,sBAAW,sBAAC,sBAAAC,EAAA,6DAC9BF,GAAa,GADiB,SAEtBG,IAAM,CACVC,OAAQ,MACRC,IAAK,kEACLC,iBAAiB,EACjBC,KAAM,CACJZ,SAAUA,KAPc,2CAU7B,CAACA,KAEJa,qBAAU,WACRC,IACAC,MACC,IACHF,qBAAU,WACRR,GAAa,KACZ,CAACL,IAIN,IAAMc,EAAa,uCAAG,8BAAAP,EAAA,sEACCC,IAAM,CACrBC,OAAQ,MACRC,IAAK,yCACLC,iBAAiB,IAJH,OACZC,EADY,OAMdZ,EAAWY,EAAKA,KACtBX,EAAYD,EAAS,GAAGA,UAPJ,2CAAH,qDAUXe,EAAiB,uCAAG,8BAAAR,EAAA,sEACLC,IAAM,CACrBC,OAAQ,MACRC,IAAK,0CACLC,iBAAiB,IAJG,OAClBC,EADkB,OAMlBZ,EAAWY,EAAKA,KACxBR,EAAkBJ,GAPQ,2CAAH,qDASvB,OACE,cAAC,IAAD,UACE,sBAAKb,UAAU,MAAf,UACE,cAAC,EAAD,CAAQe,cAAeA,EAAeC,iBAAkBA,EAAkBhC,YAAaA,EAAaD,UAAWA,IAC7G,0BAAS8C,GAAG,OAAZ,UACE,sBAAKA,GAAG,MAAR,UACI,wBAAQA,GAAG,UAAU7D,MAAM,KAAKC,OAAO,OACvC,wBAAQ4D,GAAG,UAAU7D,MAAM,KAAKC,OAAO,OACvC,wBAAQ4D,GAAG,UAAU7D,MAAM,KAAKC,OAAO,OAAc,uBAErD,wBAAQ4D,GAAG,UAAU7D,MAAM,KAAKC,OAAO,OACvC,wBAAQ4D,GAAG,UAAU7D,MAAM,KAAKC,OAAO,OACvC,wBAAQ4D,GAAG,UAAU7D,MAAM,KAAKC,OAAO,OAAc,uBAErD,wBAAQ4D,GAAG,UAAU7D,MAAM,KAAKC,OAAO,OACvC,wBAAQ4D,GAAG,UAAU7D,MAAM,KAAKC,OAAO,OACvC,wBAAQ4D,GAAG,UAAU7D,MAAM,KAAKC,OAAO,UAG3C,sBAAK4D,GAAG,QAAR,UACI,uCACA,8DACA,mFACJ,iCAAQ,wBAAQA,GAAG,MAAX,mCClFpB,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.99b9495c.chunk.js","sourcesContent":["import React, {  } from \"react\"\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: \"#4F8A10\",\r\n        color: \"white\"\r\n    },\r\n    closed: {\r\n      backgroundColor: \"#068701\",\r\n      color: \"white\"\r\n    },\r\n    paper: {\r\n      paddingY: theme.spacing(2),\r\n      margin: 'auto',\r\n      marginTop: \"20px\",\r\n    },\r\n    open: {\r\n      backgroundColor: \"#F5F5F5\"\r\n    },\r\n    description: {\r\n      margin: \"10px 0 10px 0\",\r\n      textAlign: \"center\"\r\n    }\r\n  }));\r\n\r\nconst Set = ({workoutIndex, excerciseIndex, setIndex, set, workouts, workout, exercise, setWorkouts, newWorkout, setNewWorkout, myElement}) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const handleResistence = (el) => {\r\n      if(history.location.pathname === '/ActiveWorkout'){\r\n        if(el) {\r\n \r\n          // Align temp input element approximately where the input element is\r\n          // so the cursor doesn't jump around\r\n          var __tempEl__ = document.createElement('input');\r\n          __tempEl__.pattern=\"[0-9]*\"\r\n          __tempEl__.inputmode=\"decimal\"\r\n          __tempEl__.style.position = 'absolute';\r\n          __tempEl__.style.top = (window.pageYOffset || document.documentElement.scrollTop) + 'px';\r\n          __tempEl__.style.left = el.offsetLeft + 'px';\r\n          __tempEl__.style.height = 0;\r\n          __tempEl__.style.opacity = 0;\r\n          // Put this temp element as a child of the page <body> and focus on it\r\n          document.body.appendChild(__tempEl__);\r\n          __tempEl__.focus();\r\n          __tempEl__.addEventListener(\"input\", function(){\r\n   \r\n            if(__tempEl__.value === \"\"){\r\n              let newObj = cloneDeep(newWorkout)\r\n              newObj.excirceses[excerciseIndex].sets[setIndex].resistence = 0\r\n              setNewWorkout(newObj)\r\n            }else{\r\n              let newObj = cloneDeep(newWorkout)\r\n              newObj.excirceses[excerciseIndex].sets[setIndex].resistence = __tempEl__.value\r\n              setNewWorkout(newObj)\r\n            }\r\n          }, {preventScroll: true});\r\n          // The keyboard is open. Now do a delayed focus on the target element\r\n          history.push(\"/ActiveWorkout\");\r\n        }\r\n      }\r\n    }\r\n    const handleDuration = (el) => {\r\n      if(history.location.pathname === '/ActiveWorkout'){\r\n        if(document.getElementsByTagName('input')){\r\n          const myNode = document.body.getElementsByTagName('input');\r\n          myNode.innerHTML = '';\r\n        }\r\n        if(el) {\r\n          // Align temp input element approximately where the input element is\r\n          // so the cursor doesn't jump around\r\n          var __tempEl__ = document.createElement('input');\r\n          __tempEl__.pattern=\"[0-9]*\"\r\n          __tempEl__.inputmode=\"decimal\"\r\n          __tempEl__.style.position = 'absolute';\r\n          __tempEl__.style.top = (window.pageYOffset || document.documentElement.scrollTop) + 'px';\r\n          __tempEl__.style.left = el.offsetLeft + 'px';\r\n          __tempEl__.style.height = 0;\r\n          __tempEl__.style.opacity = 0;\r\n          // Put this temp element as a child of the page <body> and focus on it\r\n          document.body.appendChild(__tempEl__);\r\n          __tempEl__.id=\"temp\"\r\n          __tempEl__.focus();\r\n          __tempEl__.addEventListener(\"input\", function(){\r\n   \r\n            if(__tempEl__.value === \"\"){\r\n              let newObj = cloneDeep(newWorkout)\r\n              newObj.excirceses[excerciseIndex].sets[setIndex].duration = 0\r\n              setNewWorkout(newObj)\r\n            }else{\r\n              let newObj = cloneDeep(newWorkout)\r\n              newObj.excirceses[excerciseIndex].sets[setIndex].duration = __tempEl__.value\r\n              setNewWorkout(newObj)\r\n            }\r\n          });\r\n          __tempEl__.addEventListener(\"focusout\", function(){\r\n            document.body.removeChild(__tempEl__);\r\n          });\r\n          // The keyboard is open. Now do a delayed focus on the target element\r\n        }\r\n        history.push(\"/ActiveWorkout\");\r\n      }\r\n    }\r\n    const statusHandler = () => {\r\n      if(history.location.pathname === '/ActiveWorkout'){\r\n        let newObj = cloneDeep(newWorkout)\r\n        let status = newObj.excirceses[excerciseIndex].sets[setIndex].status\r\n        if(status === \"open\"){\r\n          newObj.excirceses[excerciseIndex].sets[setIndex].status = \"closed\"\r\n        }else{\r\n          newObj.excirceses[excerciseIndex].sets[setIndex].status = \"open\"    \r\n        }\r\n        setNewWorkout(newObj) \r\n        console.log(\"double click\")\r\n      }\r\n    }\r\n\r\n    return(\r\n        <Paper\r\n        variant=\"outlined\"\r\n        square={false}\r\n        className={`${classes.paper} ${set.status === 'closed' && history.location.pathname !== \"/\" ? classes.closed : classes.open}`}\r\n        onDoubleClick={() => statusHandler()}\r\n        >\r\n        <Grid container direction=\"row\">\r\n          <Grid item xs={6} >\r\n            <Typography className={classes.description} gutterBottom variant=\"subtitle2\">\r\n            <span id=\"my-element\" onClick={() => handleResistence(myElement)}> {set.resistence} </span> \r\n            {set.resistencePrefix}   \r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography className={classes.description} variant=\"subtitle2\">\r\n            <span id=\"my-element\" onClick={() => handleDuration(myElement)}> {set.duration} </span> \r\n              {set.durationPrefix}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Set;\r\n","import React, { } from \"react\"\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: \"#4F8A10\",\r\n        color: \"white\"\r\n    },\r\n    fail: {\r\n        backgroundColor: \"#D8000C\",\r\n        color: \"white\"\r\n    },\r\n    paper: {\r\n      paddingY: theme.spacing(2),\r\n      margin: 'auto',\r\n      marginTop: \"20px\",\r\n      maxHeight: \"41px\"\r\n    },\r\n    open: {\r\n      backgroundColor: \"#C0C0C0\"\r\n    },\r\n    description: {\r\n      margin: \"10px 0 10px 0\",\r\n      textAlign: \"center\"\r\n    }\r\n  }));\r\n\r\nconst Set = ({set, workouts, workout, exercise, setWorkouts, newWorkout, excerciseIndex, setNewWorkout}) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n      let newObj = cloneDeep(newWorkout) \r\n    const statusHandler = () => {\r\n\r\n      console.log(newObj.excirceses[excerciseIndex])\r\n      newObj.excirceses[excerciseIndex].sets.push(\r\n            {\r\n                duration: newObj.excirceses[excerciseIndex].sets[0].duration,\r\n                resistence: newObj.excirceses[excerciseIndex].sets[0].resistence,\r\n                durationPrefix: newObj.excirceses[excerciseIndex].sets[0].durationPrefix,\r\n                resistencePrefix: newObj.excirceses[excerciseIndex].sets[0].resistencePrefix,\r\n                status: \"open\"\r\n            }\r\n        )\r\n\r\n        setNewWorkout(newObj)\r\n        history.push(\"/ActiveWorkout\") \r\n    }\r\n    return(\r\n        <Paper\r\n        onClick={statusHandler}\r\n        variant=\"outlined\"\r\n        square={false}\r\n        className={`${classes.paper} ${classes.open}`} \r\n        >\r\n        <Grid container direction=\"row\">\r\n          <Grid item xs={12}>\r\n            <Typography className={classes.description} gutterBottom variant=\"subtitle2\">\r\n              <AddIcon style={{height: \"20px\", inline:false}} inline=\"true\"/>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Set;\r\n\r\n","import React, { } from \"react\"\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: \"#4F8A10\",\r\n        color: \"white\"\r\n    },\r\n    fail: {\r\n        backgroundColor: \"#D8000C\",\r\n        color: \"white\"\r\n    },\r\n    paper: {\r\n      paddingY: theme.spacing(2),\r\n      margin: 'auto',\r\n      marginTop: \"20px\",\r\n      maxHeight: \"41px\"\r\n    },\r\n    open: {\r\n      backgroundColor: \"#C0C0C0\"\r\n    },\r\n    description: {\r\n      margin: \"10px 0 10px 0\",\r\n      textAlign: \"center\"\r\n    }\r\n  }));\r\n\r\nconst Set = ({set, workouts, workout, exercise, setWorkouts, newWorkout, excerciseIndex, setNewWorkout}) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n      let newObj = cloneDeep(newWorkout) \r\n    const statusHandler = () => {\r\n\r\n      console.log(newObj.excirceses[excerciseIndex])\r\n      if(newObj.excirceses[excerciseIndex].sets.length > 1){\r\n        newObj.excirceses[excerciseIndex].sets.pop()\r\n      }\r\n        setNewWorkout(newObj)\r\n        history.push(\"/ActiveWorkout\") \r\n    }\r\n    return(\r\n        <Paper\r\n        onClick={statusHandler}\r\n        variant=\"outlined\"\r\n        square={false}\r\n        className={`${classes.paper} ${classes.open}`} \r\n        >\r\n        <Grid container direction=\"row\">\r\n          <Grid item xs={12}>\r\n            <Typography className={classes.description} gutterBottom variant=\"subtitle2\">\r\n              <RemoveIcon style={{height: \"20px\", inline:false}} inline=\"true\"/>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Set;\r\n\r\n","import React, {  } from \"react\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Set from './Set'\r\nimport NewSet from './NewSet'\r\nimport RemoveSet from './RemoveSet'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    setWrapper: {\r\n        paddingBottom: \"30px\"\r\n    },\r\n    exercise: {\r\n      marginTop: \"5px\",\r\n      paddingTop: \"10px\"\r\n    },\r\n    exerciseName: {\r\n        textAlign: 'center',\r\n        margin: \"auto\",\r\n      },\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n          margin: 0,\r\n        },\r\n      },\r\n    success: {\r\n        backgroundColor: \"#4F8A10\",\r\n        color: \"white\"\r\n    },\r\n    fail: {\r\n        backgroundColor: \"#D8000C\",\r\n        color: \"white\"\r\n    },\r\n    changeset: {\r\n        paddingLeft: \"60px\",\r\n        paddingRight: \"60px\"\r\n    }\r\n  }));\r\n\r\nconst Exercise = ({workoutIndex, excerciseIndex, value, setValue, exercise, workout, setWorkouts, workouts, newWorkout, setNewWorkout, newWorkoutExerciseIndex}) => {\r\n    const sets = exercise.sets;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const myElement = document.getElementById('my-element');\r\n    return(\r\n            <Grid className={classes.exercise} container>\r\n                <Grid xs={4} item className={classes.exerciseName}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        {exercise.name}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid className={classes.setWrapper} container\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                >\r\n                    {sets.map((set, index) => (\r\n                            <Grid key={index} item xs={11}>\r\n                                <Set \r\n                                myElement={myElement}\r\n                                setNewWorkout={setNewWorkout}\r\n                                workoutIndex={workoutIndex} excerciseIndex={excerciseIndex} setIndex={index} newWorkout={newWorkout}\r\n                                value={value} setValue={setValue} set={set} workout={workout} workouts={workouts} setWorkouts={setWorkouts} exercise={exercise}/>        \r\n                            </Grid>\r\n                    ))}\r\n                    {history.location.pathname !== '/' && (\r\n                        <Grid xs={11} item>\r\n                            <Grid container direction=\"row\">\r\n                                <Grid xs={6} item className={classes.changeset}>\r\n                                    <RemoveSet \r\n                                    newWorkout={newWorkout} setNewWorkout={setNewWorkout}\r\n                                    workoutIndex={workoutIndex} excerciseIndex={excerciseIndex}\r\n                                    key={exercise.exerciseID} workout={workout} workouts={workouts} setWorkouts={setWorkouts} exercise={exercise}\r\n                                    /> \r\n                                </Grid>    \r\n                                <Grid xs={6} item className={classes.changeset}>\r\n                                    <NewSet \r\n                                    newWorkout={newWorkout} setNewWorkout={setNewWorkout}\r\n                                    workoutIndex={workoutIndex} excerciseIndex={excerciseIndex}\r\n                                    key={exercise.exerciseID} workout={workout} workouts={workouts} setWorkouts={setWorkouts} exercise={exercise}\r\n                                    /> \r\n                                </Grid>          \r\n                            </Grid>\r\n                        </Grid>                           \r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n    );\r\n}\r\n\r\nexport default Exercise;","import React from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Excircese from './Exercise'\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    margin: 0\r\n  },\r\n  paper: {\r\n    paddingY: theme.spacing(2),\r\n    marginX: 0,\r\n  },\r\n  workoutName: {\r\n    textAlign: 'center',\r\n  },\r\n  image: {\r\n    width: 128,\r\n    height: 128,\r\n  },\r\n  img: {\r\n    margin: 'auto',\r\n    display: 'block',\r\n    maxWidth: '100%',\r\n    maxHeight: '100%',\r\n  },\r\n  timer: {\r\n    textAlign: \"center\"\r\n  }\r\n}));\r\n\r\nconst Workout = ({workoutIndex, value, setValue, workout, workouts, setWorkouts, setTodos, key, setNewWorkout}) => {\r\n  const classes = useStyles();\r\n  const excirceses = workout.excirceses\r\n\r\n  const handleChange = (workout) => {\r\n    console.log(\"handle change\")\r\n    const newArr = workouts.map((w, index) => {\r\n      if(index === workoutIndex){\r\n       return {\r\n        ...w,\r\n        expanded: !w.expanded\r\n       }\r\n      }\r\n      return w\r\n    }) \r\n    setWorkouts(newArr);\r\n  };\r\n  const newArr = [...workouts]\r\n  const handleClick = () => {\r\n    console.log(newArr.length)\r\n    if(newArr.length === 1){\r\n      setWorkouts([])\r\n    }else{\r\n      newArr.splice(workoutIndex, 1)\r\n      setWorkouts(newArr)\r\n    }\r\n  };\r\n    return(\r\n\r\n      <Accordion key={workoutIndex} expanded={workout.expanded} >\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1bh-content\"\r\n          id=\"panel1bh-header\"\r\n          style={{marginTop: \"2px\"}}\r\n          onClick={() => handleChange(workout)}\r\n        >\r\n            <Typography className={classes.heading}>{workout.name}</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails style={{padding: \"0px\"}}>\r\n        <Grid item sm container>\r\n            <Grid item xs>\r\n              {excirceses.map((ex, index) => {\r\n                return <Excircese \r\n                setNewWorkout={setNewWorkout}\r\n                workoutIndex={workoutIndex} excerciseIndex={index} \r\n                value={value} setValue={setValue} key={index} workout={workout} workouts={workouts} setWorkouts={setWorkouts} \r\n                excirceses={excirceses} exercise={ex}/>\r\n              })}\r\n              <span onClick={handleClick}>delete</span>\r\n            </Grid>\r\n          </Grid>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    );\r\n}\r\n\r\nexport default Workout;","import React from \"react\"\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: \"#4F8A10\",\r\n        color: \"white\"\r\n    },\r\n    fail: {\r\n        backgroundColor: \"#D8000C\",\r\n        color: \"white\"\r\n    },\r\n    paper: {\r\n      paddingY: theme.spacing(2),\r\n      margin: 'auto',\r\n      marginTop: \"20px\",\r\n    },\r\n    open: {\r\n      backgroundColor: \"#F5F5F5\"\r\n    },\r\n    description: {\r\n      margin: \"20px 0 20px 0\",\r\n    },\r\n    headline: {\r\n        marginY: \"10px\"\r\n    },\r\n    button: {\r\n        textAlign: \"center\",\r\n        marginTop: \"30px\"\r\n    },\r\n    Lowerbody: {\r\n        borderColor: \"#3f51b5\"\r\n    },\r\n  }));\r\n\r\nconst Workout = ({workouts, setWorkouts, newWorkout, setNewWorkout, newWorkoutList, setNewWorkoutList}) => {\r\n\r\nconst classes = useStyles();\r\nconst handleClick = (w) => {\r\n    setNewWorkoutList(newWorkoutList.map(NW => { \r\n        if(NW.name === w.name){\r\n            setNewWorkout({...NW, active: true})\r\n            return{\r\n                ...NW,\r\n                active: true,\r\n            }\r\n        }\r\n        return {\r\n            ...NW,\r\n            active: false\r\n        }\r\n    }))\r\n  };\r\n\r\n    return(\r\n    <Container style={{padding: \"0\", marginTop: \"56px\"}}>\r\n        <Typography variant=\"h5\" style={{color: \"#3f51b5\", margin: \"10px\", marginTop: \"70px\"}}>\r\n            Välj pass\r\n        </Typography>\r\n            {newWorkoutList.map((w, index) => {\r\n                        return <Paper\r\n                        variant=\"outlined\"\r\n                        square={true}\r\n                        key={index}\r\n                        className={`${w.active ? classes.Lowerbody : \"\"}`}\r\n                        onClick={() => handleClick(w)}\r\n                        >\r\n                        <Grid justify=\"center\" container direction=\"row\">\r\n                            <Grid item xs={10} >\r\n                                <Typography className={classes.description} gutterBottom variant=\"subtitle2\">\r\n                                    {w.name}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </Paper>\r\n                    })}\r\n            <Grid xs={12} item className={classes.button}>\r\n                <Button size=\"large\" variant=\"outlined\">bläddra</Button>       \r\n            </Grid>\r\n        </Container>\r\n    )\r\n\r\n}\r\n\r\nexport default Workout;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n      },\r\n      menuButton: {\r\n        marginRight: theme.spacing(2),\r\n      },\r\n      title: {\r\n        flexGrow: 1,\r\n      },\r\n      timer: {\r\n          textAlign: \"right\"\r\n      },\r\n      button: {\r\n        textAlign: \"end\",\r\n        color: \"white\"\r\n    },\r\n}));\r\n\r\nconst TopBar = ({AppStatus, putWorkouts}) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  return (\r\n    <AppBar position=\"fixed\">\r\n    <Toolbar>\r\n      <Grid container>\r\n      <Grid container direction=\"row\">\r\n          <Grid item xs={6} >\r\n            <Typography onClick={() => {history.push(\"/\")}} variant=\"subtitle1\" className={classes.title}>\r\n            3 i rad\r\n          </Typography>   \r\n          </Grid>\r\n          <Grid item xs={6} className={classes.button}>\r\n            <Button onClick={putWorkouts} disabled={!AppStatus} size=\"small\" variant=\"contained\">Save changes</Button>  \r\n          </Grid>\r\n        </Grid>     \r\n      </Grid>\r\n    </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default TopBar","\r\nimport React, {} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  buttom: {\r\n      width: \"100%\",\r\n      textAlign: 'center',\r\n      height: \"56px\",\r\n      margin: 0,\r\n      padding: 0,\r\n  },\r\n  appBar: {\r\n    height: \"auto\",\r\n    top: 'auto',\r\n    bottom: 0,\r\n    margin: 0,\r\n    paddingBottom: \"30px\",\r\n  },\r\n  toolbar: {\r\n    height: \"40px\",\r\n    textAlign: 'center', \r\n    margin: 0,\r\n    padding: 0,\r\n  }\r\n}));\r\n\r\nconst BottomBar = ({setStatus, status, workouts, newWorkout, setWorkouts}) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const handleClick = () => {\r\n    if (history.location.pathname === '/newWorkout'){\r\n      if(newWorkout.excirceses > \"\"){\r\n        history.push(\"/ActiveWorkout\");\r\n        setStatus(\"save\") \r\n      }\r\n    }else if (history.location.pathname === '/ActiveWorkout'){\r\n      let nW = {...newWorkout, \r\n        finishedDate: new Date().toJSON().slice(0,10).replace(/-/g,''),\r\n        active: false\r\n      }\r\n      let newArr = [...workouts]\r\n      newArr.push(nW)\r\n      setWorkouts(newArr)\r\n      history.push(\"/\");  \r\n      setStatus(\"start workout\") \r\n    }else{\r\n      history.push(\"/newWorkout\")  \r\n      setStatus(\"next\")   \r\n    }\r\n  };\r\n  return (\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <Button onClick={handleClick} className={classes.buttom} color=\"inherit\">\r\n          <Typography variant=\"subtitle1\" style={{marginTop: \"10px\"}}>\r\n            {status}\r\n          </Typography>\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar> \r\n  );\r\n}\r\n\r\nexport default BottomBar","import React, {useEffect} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Timer from './Timer.js'\r\nimport Excircese from './Exercise.js'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: \"#4F8A10\",\r\n        color: \"white\"\r\n    },\r\n    fail: {\r\n        backgroundColor: \"#D8000C\",\r\n        color: \"white\"\r\n    },\r\n    paper: {\r\n      margin: \"60px 10px 10px 10px\", \r\n    },\r\n    open: {\r\n      backgroundColor: \"#F5F5F5\"\r\n    },\r\n    description: {\r\n      margin: \"30px 0 30px 0\",\r\n      textAlign: \"center\"\r\n    },\r\n    container: {\r\n        padding: 0,\r\n        width: \"100%\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\"\r\n    },\r\n  }));\r\nconst ActiveWorkout = ({setStatus, status, newWorkout, setNewWorkout, setWorkouts}) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(\"Save\")\r\n      }, [setStatus]);\r\n\r\n    const workouts = [newWorkout]\r\n    const excirceses = newWorkout.excirceses\r\n\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        style={{width:\"100%\", padding: \"0\", marginBottom: \"120px\"}}\r\n        >\r\n            <Grid container>\r\n                <Grid xs={12} item className={classes.exerciseName}>\r\n                    <Paper variant=\"outlined\" className={classes.paper}>\r\n                        <Grid container>\r\n                            <Grid  item xs={6} style={{padding:\"10px\"}}>\r\n                                {newWorkout.name}\r\n                            </Grid>\r\n                            <Grid item xs={6} style={{textAlign:\"right\",padding:\"10px\"}}>\r\n                                <Timer/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        {excirceses.map((ex, index) => {\r\n            return <Excircese \r\n            workoutIndex={0} \r\n            newWorkout={newWorkout} setNewWorkout={setNewWorkout}\r\n            key={index} workout={newWorkout} workouts={workouts} \r\n            excirceses={excirceses} exercise={ex} setWorkouts={setWorkouts}\r\n            excerciseIndex={index}/>\r\n        })}\r\n        </Grid>\r\n      );\r\n}\r\n\r\nexport default ActiveWorkout;","import React, { useState, useEffect }  from \"react\";\r\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Home from './components/Home'\r\nimport NewWorkout from './components/NewWorkout'\r\nimport axios from 'axios'\r\nimport TopBar from \"./components/TopBar\"\r\nimport BottomBar from \"./components/BottomBar\"\r\nimport ActiveWorkout from \"./components/ActiveWorkout\"\r\nimport { useCallback } from 'react'\r\n\r\nexport default function ComplexGrid() {\r\n  const [workouts, setWorkouts] = useState([]);\r\n  const [activeWorkout, setActiveWorkout] = useState(false);\r\n  const [newWorkout, setNewWorkout] = useState({});\r\n  const [newWorkoutList, setNewWorkoutList] = useState([]);\r\n  const [AppStatus, setAppStatus] = useState(false);\r\n  const [status, setStatus] = useState(\"start workout\");\r\n\r\n  const putWorkouts = useCallback(async() => {\r\n    setAppStatus(false)\r\n      await axios({\r\n        method: 'put',\r\n        url: 'https://api-mygym.herokuapp.com/schema/5ff0601c4542a80429c9c2f4',\r\n        withCredentials: true,\r\n        data: {\r\n          workouts: workouts\r\n        }\r\n      });\r\n  }, [workouts])\r\n\r\n  useEffect(() => {\r\n    fetchWorkouts()\r\n    fetchWorkoutsList()\r\n  }, []);\r\n  useEffect(() => {\r\n    setAppStatus(true)\r\n  }, [workouts]);\r\n\r\n\r\n\r\nconst fetchWorkouts = async () => {\r\n    const data = await axios({\r\n        method: 'get',\r\n        url: 'https://api-mygym.herokuapp.com/schema',\r\n        withCredentials: true,\r\n      });\r\n  const workouts = data.data\r\n  setWorkouts(workouts[0].workouts)\r\n  }\r\n\r\n  const fetchWorkoutsList = async () => {\r\n    const data = await axios({\r\n        method: 'get',\r\n        url: 'https://api-mygym.herokuapp.com/workout',\r\n        withCredentials: true\r\n      });\r\n    const workouts = data.data\r\n  setNewWorkoutList(workouts)\r\n  }\r\n  return (\r\n    <Router> \r\n      <div className=\"App\">\r\n        <TopBar activeWorkout={activeWorkout} setActiveWorkout={setActiveWorkout} putWorkouts={putWorkouts} AppStatus={AppStatus}/>\r\n          <section id=\"game\">\r\n            <div id=\"tic\">\r\n                <canvas id=\"canvas1\" width=\"75\" height=\"75\"></canvas>\r\n                <canvas id=\"canvas2\" width=\"75\" height=\"75\"></canvas>\r\n                <canvas id=\"canvas3\" width=\"75\" height=\"75\"></canvas><br/>\r\n                \r\n                <canvas id=\"canvas4\" width=\"75\" height=\"75\"></canvas>\r\n                <canvas id=\"canvas5\" width=\"75\" height=\"75\"></canvas>\r\n                <canvas id=\"canvas6\" width=\"75\" height=\"75\"></canvas><br/>\r\n                \r\n                <canvas id=\"canvas7\" width=\"75\" height=\"75\"></canvas>\r\n                <canvas id=\"canvas8\" width=\"75\" height=\"75\"></canvas>\r\n                <canvas id=\"canvas9\" width=\"75\" height=\"75\"></canvas>\r\n                \r\n            </div>\r\n            <div id=\"rules\">\r\n                <h2>Rules</h2>\r\n                <p>Each player has to take turns</p>\r\n                <p>The player who fills 3 consecutive rows first wins</p>\r\n            <center><button id=\"new\">NEW GAME</button></center>\r\n\r\n            </div>\r\n\r\n          </section>\r\n      </div>\r\n    </Router>\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}